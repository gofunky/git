attach_params: &attach_params
  attach:
    description: "Attach workspace"
    type: boolean
    default: false
  attach_at:
    description: "Where to attach the workspace"
    type: string
    default: "."

attach_args: &attach_args
  attach: << parameters.attach >>
  attach_at: << parameters.attach_at >>

alpine_params: &alpine_params
  alpine_version:
    description: "Alpine version"
    type: string
    default: ""

alpine_args: &alpine_args
  alpine_version: << parameters.alpine_version >>

docker_login_params: &docker_login_params
  login:
    description: "Login command to your repository (using environment variables from your secure context)"
    type: string
    default: echo "Login is UNSPECIFIED"

docker_arg_params: &docker_arg_params
  # Remove this once CircleCI-Public/config-preview-sdk#15 is merged
  use_args:
    description: "Enable if you pass args"
    type: boolean
    default: false
  args:
    description: "Either none, one or multiple comma-separated Docker build arguments to apply"
    type: string
    default: ""

docker_build_params: &docker_build_params
  file:
    description: "Path to the Dockerfile"
    type: string
    default: "Dockerfile"
  cache:
    description: "Use image layer cache"
    type: boolean
    default: false
  prepare:
    description: "Prepare steps after checkout (e.g., chmod)"
    type: steps
    default: []
  path:
    description: "Build path"
    type: string
    default: "."
  add_labels:
    description: "Add default schema labels"
    type: boolean
    default: false
  base_tag:
    description: "Docker base tag to use"
    type: string
    default: app

docker_tags_params: &docker_tags_params
  tags:
    description: "Either one or multiple comma-separated Docker tags to apply and push"
    type: string
    default: ""

docker_build_args: &docker_build_args
  <<: *attach_args
  # Remove this once CircleCI-Public/config-preview-sdk#15 is merged
  use_args: << parameters.use_args >>
  args: << parameters.args >>
  file: << parameters.file >>
  cache: << parameters.cache >>
  prepare: << parameters.prepare >>
  path: << parameters.path >>
  base_tag: << parameters.base_tag >>
  add_labels: << parameters.add_labels >>

docker_version_params: &docker_version_params
  docker_version:
    description: "Docker version"
    type: string
    default: stable

readmyhub_version_params: &readmyhub_version_params
  version:
    description: "Version of the readmyhub Docker image"
    type: string
    default: stable
  file:
    description: "Path to the README.md file"
    type: string
    default: "README.md"
  organization:
    description: "Docker Hub organization or user name"
    type: string
    default: ""
  repository:
    description: "Docker Hub repository name"
    type: string
    default: ""

readmyhub_update_params: &readmyhub_update_params
  derive_repo:
    description: "Enable to automatically derive the Docker Hub repository from the GitHub repository"
    type: boolean
    default: true

envorb_prepare_params: &envorb_prepare_params
  <<: *attach_params
  checkout:
    description: "Environment variable depends on a checkout"
    type: boolean
    default: false
  prepare:
    description: "Environment variable depends on preparation steps"
    type: steps
    default: []

envorb_prepare_args: &envorb_prepare_args
  <<: *attach_args
  checkout: << parameters.checkout >>
  prepare: << parameters.prepare >>

envorb_params: &envorb_params
  variable:
    description: "Name of the variable"
    type: string

envorb_args: &envorb_args
  variable: << parameters.variable >>

envorb_value_params: &envorb_value_params
  value:
    description: "The variable value"
    type: string

envorb_value_args: &envorb_value_args
  value: << parameters.value >>

envorb_cmd_params: &envorb_cmd_params
  cmd:
    description: "Command that generates the variable"
    type: string

envorb_cmd_args: &envorb_cmd_args
  cmd: << parameters.cmd >>

envorb_http_params: &envorb_http_params
  address:
    description: "HTTP address that contains the variable"
    type: string

envorb_http_args: &envorb_http_args
  address: << parameters.address >>

orbs:
  envorb:
    executors:
      default:
        parameters:
          <<: *alpine_params
        docker:
        - image: gofunky/git:envload
    commands:
      prepare:
        parameters:
          <<: *envorb_prepare_params
          <<: *envorb_params
        steps:
        - run:
            name: Check variable name
            command: |
              if [ -e "./env/<< parameters.variable >>.env" ]; then
                echo "Variable naming conflict"
                exit 1
              fi
        - when:
            condition: << parameters.checkout >>
            steps:
            - checkout
            - run:
                name: Check for submodules
                command: |
                  if [ -e "./.gitmodules" ]; then
                    echo "Checking out detected submodules..."
                    git submodule sync
                    git submodule update --init
                  else
                    echo "SKIPPING..."
                  fi
        - when:
            condition: << parameters.attach >>
            steps:
            - attach_workspace:
                at: << parameters.attach_at >>
        - run:
            name: Deploy envorb store
            command: |
              mkdir -pv ./env
              echo "0.2.0" > ./env/ENVORB_VERSION.env
              if [ ! -e "/usr/local/bin/envload" ]; then
                echo "Installing envorb loader..."
                wget -O /usr/local/bin/envload https://raw.githubusercontent.com/gofunky/orbs/master/envorb/load.sh
                chmod +x /usr/local/bin/envload
              fi
        - steps: << parameters.prepare >>
      value:
        parameters:
          <<: *envorb_value_params
          <<: *envorb_params
        steps:
        - run:
            name: Set variable value
            command: |
              source /usr/local/bin/envload
              export << parameters.variable >>="<< parameters.value >>"
              echo "SET << parameters.variable >>: ${<< parameters.variable >>}"
              echo "${<< parameters.variable >>}" > ./env/<< parameters.variable >>.env

      cmd:
        parameters:
          <<: *envorb_cmd_params
          <<: *envorb_params
        steps:
        - run:
            name: Execute command
            command: |
              source /usr/local/bin/envload
              export << parameters.variable >>=$(<< parameters.cmd >>)
              echo "SET << parameters.variable >>: ${<< parameters.variable >>}"
              echo "${<< parameters.variable >>}" > ./env/<< parameters.variable >>.env

      http:
        parameters:
          <<: *envorb_http_params
          <<: *envorb_params
        steps:
        - run:
            name: Fetch HTTP
            command: |
              source /usr/local/bin/envload
              export << parameters.variable >>=$(wget -O - << parameters.address >>)
              echo "SET << parameters.variable >>: ${<< parameters.variable >>}"
              echo "${<< parameters.variable >>}" > ./env/<< parameters.variable >>.env

      match_version:
        parameters:
          <<: *envorb_params
        steps:
        - run:
            name: Match the semantic version
            command: |
              source /usr/local/bin/envload
              << parameters.variable >>=$(${<< parameters.variable >>} | sed -nre 's/^[^0-9]*(([0-9]+\.)*[0-9]+).*/\1/p')
              echo "SET << parameters.variable >>: ${<< parameters.variable >>}"
              echo "${<< parameters.variable >>}" > ./env/<< parameters.variable >>.env

      complete:
        parameters:
          <<: *envorb_params
        steps:
        - persist_to_workspace:
            root: .
            paths:
            - env/<< parameters.variable >>.env

    jobs:
      value:
        description: "Set the variable value as specified"
        parameters:
          <<: *envorb_params
          <<: *envorb_prepare_params
          <<: *alpine_params
          <<: *envorb_value_params
        executor:
          name: default
          <<: *alpine_args
        steps:
        - prepare:
            <<: *envorb_args
            <<: *envorb_prepare_args
        - value:
            <<: *envorb_args
            <<: *envorb_value_args
        - complete:
            <<: *envorb_args

      cmd:
        description: "Derive the variable from the given command"
        parameters:
          <<: *envorb_params
          <<: *envorb_prepare_params
          <<: *alpine_params
          <<: *envorb_cmd_params
        executor:
          name: default
          <<: *alpine_args
        steps:
        - prepare:
            <<: *envorb_args
            <<: *envorb_prepare_args
        - cmd:
            <<: *envorb_args
            <<: *envorb_cmd_args
        - complete:
            <<: *envorb_args

      http:
        description: "Derive the variable from the given http address"
        parameters:
          <<: *envorb_params
          <<: *envorb_prepare_params
          <<: *alpine_params
          <<: *envorb_http_params
        executor:
          name: default
          <<: *alpine_args
        steps:
        - prepare:
            <<: *envorb_args
            <<: *envorb_prepare_args
        - http:
            <<: *envorb_args
            <<: *envorb_http_args
        - complete:
            <<: *envorb_args

      cmd_version:
        description: "Derive a semantic version from the given command"
        parameters:
          <<: *envorb_params
          <<: *envorb_prepare_params
          <<: *alpine_params
          <<: *envorb_cmd_params
        executor:
          name: default
          <<: *alpine_args
        steps:
        - prepare:
            <<: *envorb_args
            <<: *envorb_prepare_args
        - cmd:
            <<: *envorb_args
            <<: *envorb_cmd_args
        - match_version:
            <<: *envorb_args
        - complete:
            <<: *envorb_args

      http_version:
        description: "Derive a semantic version from the given http address"
        parameters:
          <<: *envorb_params
          <<: *envorb_prepare_params
          <<: *alpine_params
          <<: *envorb_http_params
        executor:
          name: default
          <<: *alpine_args
        steps:
        - prepare:
            <<: *envorb_args
            <<: *envorb_prepare_args
        - http:
            <<: *envorb_args
            <<: *envorb_http_args
        - match_version:
            <<: *envorb_args
        - complete:
            <<: *envorb_args

      github:
        description: "Derive the version from the github.com tag"
        parameters:
          <<: *envorb_params
          <<: *envorb_prepare_params
          <<: *alpine_params
          repository:
            description: "Repository in the format 'org/repo'"
            type: string
        executor:
          name: default
          <<: *alpine_args
        steps:
        - prepare:
            <<: *envorb_args
            <<: *envorb_prepare_args
        - http:
            <<: *envorb_args
            address: https://api.github.com/repos/<< parameters.repository >>/releases/latest
        - cmd:
            cmd: "${<< parameters.variable >>} | grep -o '\"tag_name\": \"\\K.*?(?=\")'"
        - match_version:
            <<: *envorb_args
        - complete:
            <<: *envorb_args

      git_tag:
        description: "Derive the version from the latest git tag"
        parameters:
          <<: *envorb_params
          <<: *envorb_prepare_params
          <<: *alpine_params
          repository:
            description: "Path to the local git repository"
            type: string
            default: "."
        executor:
          name: default
          <<: *alpine_args
        steps:
        - prepare:
            <<: *envorb_args
            <<: *envorb_prepare_args
        - cmd:
            cmd: cd ${<< parameters.repository >>} && git describe --abbrev=0 --tags
        - match_version:
            <<: *envorb_args
        - complete:
            <<: *envorb_args

  readmyhuborb:
    executors:
      default:
        parameters:
          <<: *readmyhub_version_params
        docker:
        - image: gofunky/readmyhub:<< parameters.version >>-git
        working_directory: /data
        environment:
          README_PATH: /data/<< parameters.file >>
          IFS: "/"
          DOCKERHUB_ORG: << parameters.organization >>
          DOCKERHUB_REPO: << parameters.repository >>
    commands:
      update:
        parameters:
          <<: *readmyhub_update_params
        steps:
        - checkout
        - run:
            name: Check for submodules
            command: |
              if [ -e "./.gitmodules" ]; then
                echo "Checking out detected submodules..."
                git submodule sync
                git submodule update --init
              else
                echo "SKIPPING..."
              fi
        - run:
            name: Check DOCKER_USR
            command: |
              if [ -z "$DOCKER_USR" ]; then
                echo "ERROR: DOCKER_USR is not set!"
                exit 127
              fi
        - run:
            name: Check DOCKER_PWD
            command: |
              if [ -z "$DOCKER_PWD" ]; then
                echo "ERROR: DOCKER_PWD is not set!"
                exit 127
              fi
        - when:
            condition: << parameters.derive_repo >>
            steps:
            - run:
                name: Update README
                command: |
                  set -f
                  URL=`git remote get-url origin`
                  URL=`echo "$URL" | sed -e "s/^https:\/\///" -e "s/\.git//" | sed -e "s/^git@//"`
                  URL=`echo "$URL" | sed -r 's/github.com:/github.com\//g'`
                  set -- $URL
                  DOCKERHUB_ORG=$2
                  DOCKERHUB_REPO=$3
                  export DOCKERHUB_USR=${DOCKER_USR}
                  export DOCKERHUB_PWD=${DOCKER_PWD}
                  node /app/index.js
                  set +f
        - unless:
            condition: << parameters.derive_repo >>
            steps:
            - run:
                name: Update README
                command: |
                  export DOCKERHUB_USR=${DOCKER_USR}
                  export DOCKERHUB_PWD=${DOCKER_PWD}
                  node /app/index.js
    jobs:
      update:
        description: "Push the given README.md to the Docker Hub"
        executor:
          name: default
          version: << parameters.version >>
          file: << parameters.file >>
          organization: << parameters.organization >>
          repository: << parameters.repository >>
        parameters:
          <<: *readmyhub_version_params
          <<: *readmyhub_update_params
        steps:
        - update:
            derive_repo: << parameters.derive_repo >>

  dockerorb:
    executors:
      default:
        parameters:
          <<: *docker_version_params
        docker:
        - image: docker:<< parameters.docker_version >>-git
        working_directory: ~/app
        environment:
          IFS: ","
    commands:
      login:
        parameters:
          <<: *docker_login_params
        steps:
        - run:
            name: "Login to your origin Docker repository"
            command: << parameters.login >>
      build:
        parameters:
          <<: *docker_arg_params
          <<: *attach_params
          <<: *docker_build_params
        steps:
        - checkout
        - setup_remote_docker
        - run:
            name: Check for submodules
            command: |
              if [ -e "./.gitmodules" ]; then
                echo "Checking out detected submodules..."
                git submodule sync
                git submodule update --init
              else
                echo "SKIPPING..."
              fi
        - when:
            condition: << parameters.attach >>
            steps:
            - attach_workspace:
                at: << parameters.attach_at >>
        - run:
            name: Deploy envorb store
            command: |
              if [ ! -e "/usr/local/bin/envload" ]; then
                echo "Installing envorb loader..."
                wget -O /usr/local/bin/envload https://raw.githubusercontent.com/gofunky/orbs/master/envorb/load.sh
                chmod +x /usr/local/bin/envload
              fi
        - steps: << parameters.prepare >>
        - when:
            condition: << parameters.cache >>
            steps:
            - restore_cache:
                keys:
                - docker-<< parameters.path >>-<< parameters.file >>-<< parameters.base_tag >>-{{ .Branch }}
                paths:
                - /caches/<< parameters.base_tag >>.tar
            - run:
                name: Load Docker image layer cache
                command: |
                  set +o pipefail
                  docker load -i /caches/<< parameters.base_tag >>.tar || true
        - when:
            condition: << parameters.use_args >>
            # Use this instead once CircleCI-Public/config-preview-sdk#15 is merged
            # matches: ['([a-zA-Z][\w]*=[\w-\/.:]+)(,[a-zA-Z][\w]*=[\w-\/.:]+)*', "<< parameters.args >>"]
            steps:
            - run:
                name: Build Docker image with arguments and labels
                command: |
                  source /usr/local/bin/envload
                  buildarg=""
                  args="<< parameters.args >><<# parameters.add_labels >>,BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"`,VCS_REF=`git rev-parse --short HEAD`<</ parameters.add_labels >>"
                  for arg in $args; do
                    buildarg="${buildarg} --build-arg ${arg}"
                  done
                  build="docker build ${buildarg} --cache-from=<< parameters.base_tag >> -f << parameters.file >> -t << parameters.base_tag >> << parameters.path >>"
                  eval $build
        - unless:
            condition: << parameters.use_args >>
            # Use this instead once CircleCI-Public/config-preview-sdk#15 is merged
            # matches: ['([a-zA-Z][\w]*=[\w-\/.:]+)(,[a-zA-Z][\w]*=[\w-\/.:]+)*', "<< parameters.args >>"]
            steps:
            - run:
                name: Build Docker image without arguments and with labels
                command: |
                  source /usr/local/bin/envload
                  docker build <<# parameters.add_labels >>--build-arg BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` --build-arg VCS_REF=`git rev-parse --short HEAD` <</ parameters.add_labels >>--cache-from=<< parameters.base_tag >> -f << parameters.file >> -t << parameters.base_tag >> << parameters.path >>
        - when:
            condition: << parameters.cache >>
            steps:
            - run:
                name: Save Docker image layer cache
                command: |
                  mkdir -p /caches
                  docker save -o /caches/<< parameters.base_tag >>.tar << parameters.base_tag >>
            - save_cache:
                key: docker-<< parameters.path >>-<< parameters.file >>-<< parameters.base_tag >>-{{ .Branch }}-{{ epoch }}
                paths:
                - /caches/<< parameters.base_tag >>.tar
      tag:
        parameters:
          <<: *docker_tags_params
          base_tag:
            description: "Docker base tag to use"
            type: string
            default: app
        steps:
        - run:
            name: Add Docker tags
            command: |
              source /usr/local/bin/envload
              tags="<< parameters.tags >>"
              for tag in $tags; do
                docker tag << parameters.base_tag >> "$tag"
              done
      test:
        parameters:
          compose:
            description: "Path to the docker compose test file to test"
            type: string
            default: "docker-compose.test.yml"
        steps:
        - run:
            name: Install Docker Compose
            command: |
              if [ ! -e "/usr/local/bin/docker-compose" ]; then
                echo "Installing latest Docker Compose..."
                apk add --no-cache py-pip
                pip install docker-compose
              else
                echo "SKIPPING..."
              fi
        - run:
            name: Run Docker compose tests
            command: |
              docker-compose -f "<< parameters.compose >>" up --exit-code-from sut --build --abort-on-container-exit
      push:
        parameters:
          <<: *docker_tags_params
        steps:
        - deploy:
            name: Push application Docker image
            command: |
              source /usr/local/bin/envload
              tags="<< parameters.tags >>"
              for tag in $tags; do
                docker push "$tag"
              done
    jobs:
      build:
        description: "Build Docker image"
        executor:
          name: default
          docker_version: << parameters.docker_version >>
        parameters:
          <<: *docker_arg_params
          <<: *attach_params
          <<: *docker_build_params
          <<: *docker_version_params
        steps:
        - build:
            <<: *docker_build_args

      build_test:
        description: "Build Docker image"
        executor:
          name: default
          docker_version: << parameters.docker_version >>
        parameters:
          <<: *docker_arg_params
          <<: *attach_params
          <<: *docker_build_params
          <<: *docker_tags_params
          <<: *docker_version_params
          compose:
            description: "Path to the docker compose test file to test"
            type: string
            default: "docker-compose.test.yml"
        steps:
        - build:
            <<: *docker_build_args
        - tag:
            tags: << parameters.tags >>
            base_tag: << parameters.base_tag >>
        - test:
            compose: << parameters.compose >>

      build_push:
        description: "Build and push Docker image"
        executor:
          name: default
          docker_version: << parameters.docker_version >>
        parameters:
          <<: *docker_arg_params
          <<: *attach_params
          <<: *docker_build_params
          <<: *docker_tags_params
          <<: *docker_version_params
          <<: *docker_login_params
        steps:
        - build:
            <<: *docker_build_args
        - when:
            condition: true
            # Use this instead once CircleCI-Public/config-preview-sdk#15 is merged
            # matches: ['([\w-\/.:]+)?(,[\w-\/.:]+)*', "<< parameters.tags >>"]
            steps:
            - tag:
                tags: << parameters.tags >>
                base_tag: << parameters.base_tag >>
            - login:
                login: << parameters.login >>
            - push:
                tags: << parameters.tags >>

      build_test_push:
        description: "Build and push Docker image"
        executor:
          name: default
          docker_version: << parameters.docker_version >>
        parameters:
          <<: *docker_arg_params
          <<: *attach_params
          <<: *docker_build_params
          <<: *docker_tags_params
          <<: *docker_version_params
          <<: *docker_login_params
          compose:
            description: "Path to the docker compose test file to test"
            type: string
            default: "docker-compose.test.yml"
        steps:
        - build:
            <<: *docker_build_args
        - when:
            condition: true
            # Use this instead once CircleCI-Public/config-preview-sdk#15 is merged
            # matches: ['([\w-\/.:]+)?(,[\w-\/.:]+)*', "<< parameters.tags >>"]
            steps:
            - tag:
                tags: << parameters.tags >>
                base_tag: << parameters.base_tag >>
            - test:
                compose: << parameters.compose >>
            - login:
                login: << parameters.login >>
            - push:
                tags: << parameters.tags >>

git_job: &git_job
  attach: true
  compose: docker-compose.test.yml
  base_tag: funkygit
  add_labels: true
  docker_version: 18.06.1
  context: docker-hub
  use_args: true
  args: "VERSION=${GIT_VERSION},ALPINE=${ALPINE_VERSION}"

master_filter: &master_filter
  filters:
    branches:
      only:
      - master

pr_filter: &pr_filter
  filters:
    branches:
      ignore:
      - master

set_git_version: &set_git_version
  attach: true
  alpine_version: "3.8"
  variable: GIT_VERSION
  prepare:
  - run:
      name: Update git
      command: |
        apk add --no-cache --upgrade git
  cmd: git --version

set_alpine_version: &set_alpine_version
  attach: true
  alpine_version: "3.8"
  variable: ALPINE_VERSION
  value: "3.8"

version: 2.1
workflows:
  readme:
    jobs:
    - readmyhuborb/update:
        name: readme
        <<: *master_filter
        version: 1.1.0
        context: docker-hub
  build_latest:
    jobs:
    - envorb/cmd_version:
        name: set_git_version
        <<: *set_git_version
    - envorb/value:
        name: set_alpine_version
        <<: *set_alpine_version
    - dockerorb/build_test_push:
        name: build_latest
        <<: *master_filter
        <<: *git_job
        tags: "gofunky/git:${GIT_VERSION},gofunky/git:${GIT_VERSION}-alpine${ALPINE_VERSION},gofunky/git:latest"
        login: docker login -u $DOCKER_USR -p $DOCKER_PWD
        cache: true
        requires:
          - set_git_version
          - set_alpine_version
    - dockerorb/build_test_push:
        name: build_envload
        <<: *master_filter
        <<: *git_job
        tags: "gofunky/git:${GIT_VERSION}-envload,gofunky/git:${GIT_VERSION}-alpine${ALPINE_VERSION}-envload,gofunky/git:envload"
        login: docker login -u $DOCKER_USR -p $DOCKER_PWD
        cache: true
        add_labels: false
        file: "./orbs/envorb/Dockerfile"
        compose: "./orbs/envorb/test/docker-compose.test.yml"
        base_tag: gittest
        args: "BASE=gofunky/git:${GIT_VERSION}-alpine${ALPINE_VERSION}"
        requires:
        - set_git_version
        - set_alpine_version
        - build_latest
    - dockerorb/build_test:
        name: test_latest
        <<: *pr_filter
        <<: *git_job
        tags: "gofunky/git:${GIT_VERSION},gofunky/git:${GIT_VERSION}-alpine${ALPINE_VERSION},gofunky/git:latest"
        requires:
        - set_git_version
        - set_alpine_version
    - dockerorb/build_test:
        name: test_envload
        <<: *pr_filter
        <<: *git_job
        tags: "gofunky/git:${GIT_VERSION}-envload,gofunky/git:${GIT_VERSION}-alpine${ALPINE_VERSION}-envload,gofunky/git:envload"
        add_labels: false
        file: "./orbs/envorb/Dockerfile"
        compose: "./orbs/envorb/test/docker-compose.test.yml"
        base_tag: gittest
        args: "BASE=gofunky/git:${GIT_VERSION}-alpine${ALPINE_VERSION}"
        requires:
        - set_git_version
        - set_alpine_version
        - test_latest
  build_daily:
    triggers:
    - schedule:
        cron: "0 0 * * *"
        <<: *master_filter
    jobs:
    - envorb/cmd_version:
        name: daily_set_git_version
        <<: *set_git_version
    - envorb/value:
        name: daily_set_alpine_version
        <<: *set_alpine_version
    - dockerorb/build_test_push:
        name: daily_build_latest
        <<: *master_filter
        <<: *git_job
        tags: "gofunky/git:${GIT_VERSION},gofunky/git:${GIT_VERSION}-alpine${ALPINE_VERSION},gofunky/git:latest,gofunky/git:stable,gofunky/git:daily"
        login: docker login -u $DOCKER_USR -p $DOCKER_PWD
        cache: true
        requires:
        - daily_set_git_version
        - daily_set_alpine_version
